{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/scypion/Programing/Java_Projects/My_Projects/holiday_scheduler/frontend/src/componenets/calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport \"../interceptor/interceptor\";\n\nconst Calendar = ({\n  records,\n  calendarPagination\n}) => {\n  _s();\n\n  const [nationalHolidays, setNationalHolidays] = useState();\n  useEffect(() => {\n    window.location.reload();\n    fethcNationalHolidays();\n  }, [calendarPagination]);\n\n  const fethcNationalHolidays = () => Axios.get(\"http://localhost:8080/api/calendar/nationalHolidays\", {\n    params: {\n      month: calendarPagination.month,\n      year: calendarPagination.year\n    }\n  }).then(res => {\n    setNationalHolidays(res.data);\n  });\n\n  function daysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  }\n\n  function returnDayFormat(day) {\n    return (\"0\" + day).slice(-2);\n  }\n\n  function returnVacationTypeTag(dayStatus) {\n    switch (dayStatus) {\n      case 'PAYED':\n        return 'payedVacationButton';\n\n      case 'UNPAID':\n        return 'unpaidVacationButton';\n\n      case 'SICK':\n        return 'payedSickButton';\n\n      case 'MATERNITY':\n        return 'payedMaternityButton';\n\n      case 'BEREAVEMENT':\n        return 'payedBereavementButton';\n\n      case 'SABBATICAL':\n        return 'payedSabbaticalButton';\n\n      case 'NONE':\n        return \"noVacation\";\n\n      default:\n        return \"nationalHoliday\";\n    }\n  }\n\n  const mapNationalHolidays = dates => {\n    if (Array.isArray(nationalHolidays) && nationalHolidays.length) {\n      console.log(typeof nationalHolidays === undefined);\n      nationalHolidays.map(n => {\n        dates[parseInt(n.holidayDate.substring(8)) - 1].nationalHoliday = n.name;\n      });\n      return dates;\n    }\n\n    return dates;\n  };\n\n  let daysOfMonth = mapDaysOfWeek();\n\n  function mapDaysOfWeek() {\n    const currentMonth = calendarPagination.month;\n    const currentYear = calendarPagination.year;\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dates = [];\n    let i;\n    let monthLength = daysInMonth(currentMonth, currentYear);\n\n    for (i = 1; i <= monthLength; i++) {\n      let currentDay = returnDayFormat(i);\n      dates.push({\n        date: currentDay + \"/\" + currentMonth + \"/\" + currentYear,\n        day: days[new Date(currentYear, currentMonth - 1, i).getDay()],\n        nationalHoliday: \"\"\n      });\n    }\n\n    console.log(dates);\n    return mapNationalHolidays(dates);\n  }\n\n  const renderTableHead = () => {\n    return daysOfMonth.map((date, index) => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        className: date.nationalHoliday === \"\" ? \"calendarHeadCell\" : \"calendarHeadCell calendarHolidayHeadCell\",\n        children: date.nationalHoliday === \"\" ? date.day : date.nationalHoliday\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  const renderTableBody = () => {\n    return records.map((record, index) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"calendarNameButton\",\n            children: [record.userDto.firstName, \" \", record.userDto.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), renderTableRowsDate(record.holidayStatus)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this);\n    });\n  };\n\n  const renderTableRowsDate = holidayStatus => {\n    return holidayStatus.map((date, index) => {\n      let buttonClassName = returnVacationTypeTag(date);\n\n      if (index < daysOfMonth.length) {\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dateTag\",\n            children: daysOfMonth[index].date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"vacationButton \" + buttonClassName,\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this);\n      } else return null;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"calendarTable\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"calendarHeadCell\",\n          children: \"Employees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), renderTableHead()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: renderTableBody()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calendar, \"4yirGR7WyVeblC+NDXNYN3f+t24=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/scypion/Programing/Java_Projects/My_Projects/holiday_scheduler/frontend/src/componenets/calendar.js"],"names":["React","useState","useEffect","Axios","Calendar","records","calendarPagination","nationalHolidays","setNationalHolidays","window","location","reload","fethcNationalHolidays","get","params","month","year","then","res","data","daysInMonth","Date","getDate","returnDayFormat","day","slice","returnVacationTypeTag","dayStatus","mapNationalHolidays","dates","Array","isArray","length","console","log","undefined","map","n","parseInt","holidayDate","substring","nationalHoliday","name","daysOfMonth","mapDaysOfWeek","currentMonth","currentYear","days","i","monthLength","currentDay","push","date","getDay","renderTableHead","index","renderTableBody","record","userDto","firstName","lastName","renderTableRowsDate","holidayStatus","buttonClassName"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Axios from \"axios\";\nimport \"../interceptor/interceptor\"\n\nconst Calendar = ({records, calendarPagination}) => {\n\n\n    const [nationalHolidays, setNationalHolidays] = useState()\n\n    useEffect(() => {\n        window.location.reload();\n        fethcNationalHolidays()\n    }, [calendarPagination])\n\n    const fethcNationalHolidays = () => Axios.get(\"http://localhost:8080/api/calendar/nationalHolidays\", {\n    params: {\n        month: calendarPagination.month,\n        year: calendarPagination.year\n    }})\n    .then(\n        (res) => {\n            setNationalHolidays(res.data)\n        }\n    )\n\n    function daysInMonth (month, year) { \n        return new Date(year, month, 0).getDate(); \n    } \n    \n    function returnDayFormat(day) {\n        return (\"0\" + day).slice(-2);\n    }\n    \n    function returnVacationTypeTag(dayStatus){\n        switch (dayStatus) {\n            case 'PAYED':\n                return 'payedVacationButton'\n            case 'UNPAID':\n                return 'unpaidVacationButton'\n            case 'SICK':\n                return 'payedSickButton'\n            case 'MATERNITY':\n                return 'payedMaternityButton'\n            case 'BEREAVEMENT':\n                return 'payedBereavementButton'\n            case 'SABBATICAL':\n                return 'payedSabbaticalButton'\n            case 'NONE':\n                return \"noVacation\"\n            default:\n                return \"nationalHoliday\"\n          }\n    }\n\n    const mapNationalHolidays = (dates) => {\n\n        if(Array.isArray(nationalHolidays) && nationalHolidays.length){\n            console.log(typeof nationalHolidays === undefined)\n            nationalHolidays.map(n => {\n                dates[parseInt(n.holidayDate.substring(8))-1].nationalHoliday = n.name\n            })\n\n            return dates;\n        } \n\n        return dates\n    }\n\n    let daysOfMonth = mapDaysOfWeek()\n    \n    function mapDaysOfWeek() {\n\n\n        const currentMonth = calendarPagination.month;\n        const currentYear = calendarPagination.year;\n    \n        let days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    \n        const dates = []\n        let i\n        let monthLength = daysInMonth(currentMonth, currentYear)\n    \n        for(i = 1; i <= monthLength; i++){\n            let currentDay = returnDayFormat(i);\n\n            dates.push(\n                {\n                    date: currentDay + \"/\" + currentMonth + \"/\" + currentYear,\n                    day: days[new Date(currentYear, currentMonth-1, i).getDay()],\n                    nationalHoliday: \"\"\n                }\n            )\n        }\n\n        console.log(dates)\n\n        return mapNationalHolidays(dates);\n    }\n\n    const renderTableHead = () => {\n\n        return( daysOfMonth.map((date, index) => {\n            return (\n                    <th \n                        className={date.nationalHoliday===\"\" ? \"calendarHeadCell\" : \"calendarHeadCell calendarHolidayHeadCell\"}\n                        key={index}\n                    >\n                        {date.nationalHoliday===\"\" ? date.day : date.nationalHoliday}\n                    </th>\n                )\n            }\n        ))\n    }\n\n    const renderTableBody = () => {\n\n        return( records.map((record, index) => {\n            return(\n            <tr \n                key={index}\n            >\n                <th>\n                    <button className=\"calendarNameButton\">\n                    {record.userDto.firstName} {record.userDto.lastName}\n                    </button>\n                </th>\n                {renderTableRowsDate(record.holidayStatus)}\n            </tr>\n            )\n        }))\n    }\n\n    const renderTableRowsDate = (holidayStatus) => {\n        return( \n            holidayStatus.map((date, index) => {\n                let buttonClassName = returnVacationTypeTag(date)\n                if(index<daysOfMonth.length){\n                    return(\n                        <td key={index}>\n                            <div className=\"dateTag\">{daysOfMonth[index].date}</div>\n                            <button className={\"vacationButton \" + buttonClassName}>{date}</button>\n                        </td>\n                    )\n                } else return null\n        }))\n    }\n\n    return (\n        <table className=\"calendarTable\">\n            <thead>\n                <tr>\n                    <th className=\"calendarHeadCell\">\n                        Employees\n                    </th>\n                    {renderTableHead()}\n                </tr>\n            </thead>\n            <tbody>\n                {renderTableBody()}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Calendar"]},"metadata":{},"sourceType":"module"}