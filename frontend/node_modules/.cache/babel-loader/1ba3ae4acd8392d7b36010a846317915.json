{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/scypion/Programing/Java_Projects/My_Projects/holiday_scheduler/frontend/src/componenets/calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport \"../interceptor/interceptor\";\n\nconst Calendar = ({\n  records,\n  calendarPagination\n}) => {\n  _s();\n\n  const [nationalHolidays, setNationalHolidays] = useState([{}]);\n  useEffect(() => {\n    fethcNationalHolidays();\n  }, [calendarPagination]);\n\n  const fethcNationalHolidays = () => Axios.get(\"http://localhost:8080/api/calendar/nationalHolidays\", {\n    params: {\n      month: calendarPagination.month,\n      year: calendarPagination.year\n    }\n  }).then(res => {\n    console.log(res.data);\n    setNationalHolidays(res.data);\n  }); // {nationalHolidays.length > 0 ? console.log(nationalHolidays[0].holidayDate.substring(8,10)) : console.log(\"NONE\")}\n\n\n  function daysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n  }\n\n  function returnDayFormat(day) {\n    return (\"0\" + day).slice(-2);\n  }\n\n  function returnVacationTypeTag(dayStatus) {\n    switch (dayStatus) {\n      case 'PAYED':\n        return 'payedVacationButton';\n\n      case 'UNPAID':\n        return 'unpaidVacationButton';\n\n      case 'SICK':\n        return 'payedSickButton';\n\n      case 'MATERNITY':\n        return 'payedMaternityButton';\n\n      case 'BEREAVEMENT':\n        return 'payedBereavementButton';\n\n      case 'SABBATICAL':\n        return 'payedSabbaticalButton';\n\n      default:\n        return \"noVacation\";\n    }\n  }\n\n  const mapNationalHolidays = dates => {\n    let daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const currentMonth = calendarPagination.month;\n    const currentYear = calendarPagination.year;\n    let monthLength = daysInMonth(currentMonth, currentYear);\n    let days = [];\n    let i,\n        j = 0;\n\n    if (nationalHolidays.length !== 0) {\n      nationalHolidays.map(n => {\n        console.log(parseInt(n.holidayDate.substring(8)));\n        dates[parseInt(n.holidayDate.substring(8))].day = n.name;\n      });\n    }\n\n    console.log(days);\n  };\n\n  let daysOfMonth = mapDaysOfWeek();\n\n  function mapDaysOfWeek() {\n    const currentMonth = calendarPagination.month;\n    const currentYear = calendarPagination.year;\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dates = [];\n    let i,\n        j = 0;\n    let monthLength = daysInMonth(currentMonth, currentYear);\n\n    for (i = 1; i <= monthLength; i++) {\n      let currentDay = returnDayFormat(i);\n      let day = {};\n      dates.push({\n        date: currentDay + \"/\" + currentMonth + \"/\" + currentYear,\n        day: days[new Date(currentYear, currentMonth - 1, i).getDay()]\n      });\n    }\n\n    dates = mapNationalHolidays(dates);\n    console.log(dates);\n    return dates;\n  }\n\n  const renderTableHead = () => {\n    return daysOfMonth.map((date, index) => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        className: \"calendarHeadCell\",\n        children: date.day\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  const renderTableBody = () => {\n    return records.map((record, index) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"calendarNameButton\",\n            children: [record.userDto.firstName, \" \", record.userDto.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this), renderTableRowsDate(record.holidayStatus)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this);\n    });\n  };\n\n  const renderTableRowsDate = holidayStatus => {\n    return holidayStatus.map((date, index) => {\n      let buttonClassName = returnVacationTypeTag(date);\n\n      if (index < daysOfMonth.length) {\n        return /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dateTag\",\n            children: daysOfMonth[index].date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"vacationButton \" + buttonClassName,\n            children: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this);\n      } else return null;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"calendarTable\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          className: \"calendarHeadCell\",\n          children: \"Employees\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), renderTableHead()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: renderTableBody()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calendar, \"b5AR4+u2mjKyOfusiFDSqjVlN3E=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/scypion/Programing/Java_Projects/My_Projects/holiday_scheduler/frontend/src/componenets/calendar.js"],"names":["React","useState","useEffect","Axios","Calendar","records","calendarPagination","nationalHolidays","setNationalHolidays","fethcNationalHolidays","get","params","month","year","then","res","console","log","data","daysInMonth","Date","getDate","returnDayFormat","day","slice","returnVacationTypeTag","dayStatus","mapNationalHolidays","dates","daysOfWeek","currentMonth","currentYear","monthLength","days","i","j","length","map","n","parseInt","holidayDate","substring","name","daysOfMonth","mapDaysOfWeek","currentDay","push","date","getDay","renderTableHead","index","renderTableBody","record","userDto","firstName","lastName","renderTableRowsDate","holidayStatus","buttonClassName"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Axios from \"axios\";\nimport \"../interceptor/interceptor\"\n\nconst Calendar = ({records, calendarPagination}) => {\n\n\n    const [nationalHolidays, setNationalHolidays] = useState([{}])\n\n    useEffect(() => {\n        fethcNationalHolidays()\n    }, [calendarPagination])\n\n    const fethcNationalHolidays = () => Axios.get(\"http://localhost:8080/api/calendar/nationalHolidays\", {\n    params: {\n        month: calendarPagination.month,\n        year: calendarPagination.year\n    }})\n    .then(\n        (res) => {\n            console.log(res.data)\n            setNationalHolidays(res.data)\n        }\n    )\n\n    // {nationalHolidays.length > 0 ? console.log(nationalHolidays[0].holidayDate.substring(8,10)) : console.log(\"NONE\")}\n\n    function daysInMonth (month, year) { \n        return new Date(year, month, 0).getDate(); \n    } \n    \n    function returnDayFormat(day) {\n        return (\"0\" + day).slice(-2);\n    }\n    \n    function returnVacationTypeTag(dayStatus){\n        switch (dayStatus) {\n            case 'PAYED':\n                return 'payedVacationButton'\n            case 'UNPAID':\n                return 'unpaidVacationButton'\n            case 'SICK':\n                return 'payedSickButton'\n            case 'MATERNITY':\n                return 'payedMaternityButton'\n            case 'BEREAVEMENT':\n                return 'payedBereavementButton'\n            case 'SABBATICAL':\n                return 'payedSabbaticalButton'\n            default:\n                return \"noVacation\"\n          }\n    }\n\n    const mapNationalHolidays = (dates) => {\n\n        let daysOfWeek = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n\n\n        const currentMonth = calendarPagination.month;\n        const currentYear = calendarPagination.year;\n\n        let monthLength = daysInMonth(currentMonth, currentYear)\n\n        let days = []\n\n        let i, j = 0;\n\n\n        if(nationalHolidays.length !== 0){\n\n            nationalHolidays.map(n => {\n                console.log(parseInt(n.holidayDate.substring(8)))\n                dates[parseInt(n.holidayDate.substring(8))].day = n.name\n            })\n        }\n\n        console.log(days)\n\n    }\n\n    let daysOfMonth = mapDaysOfWeek()\n    \n    function mapDaysOfWeek() {\n\n\n        const currentMonth = calendarPagination.month;\n        const currentYear = calendarPagination.year;\n    \n        let days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    \n        const dates = []\n        let i, j = 0;\n        let monthLength = daysInMonth(currentMonth, currentYear)\n    \n        for(i = 1; i <= monthLength; i++){\n            let currentDay = returnDayFormat(i);\n            let day = {}\n\n            dates.push(\n                {\n                    date: currentDay + \"/\" + currentMonth + \"/\" + currentYear,\n                    day: days[new Date(currentYear, currentMonth-1, i).getDay()]\n                }\n            )\n        }\n\n        dates = mapNationalHolidays(dates)\n\n        console.log(dates)\n\n        return dates;\n    }\n\n    const renderTableHead = () => {\n\n        return( daysOfMonth.map((date, index) => {\n            return (\n                    <th \n                        className=\"calendarHeadCell\"\n                        key={index}\n                    >\n                        {date.day}\n                    </th>\n                )\n            }\n        ))\n    }\n\n    const renderTableBody = () => {\n\n        return( records.map((record, index) => {\n            return(\n            <tr \n                key={index}\n            >\n                <th>\n                    <button className=\"calendarNameButton\">\n                    {record.userDto.firstName} {record.userDto.lastName}\n                    </button>\n                </th>\n                {renderTableRowsDate(record.holidayStatus)}\n            </tr>\n            )\n        }))\n    }\n\n    const renderTableRowsDate = (holidayStatus) => {\n        return( \n            holidayStatus.map((date, index) => {\n                let buttonClassName = returnVacationTypeTag(date)\n                if(index<daysOfMonth.length){\n                    return(\n                        <td key={index}>\n                            <div className=\"dateTag\">{daysOfMonth[index].date}</div>\n                            <button className={\"vacationButton \" + buttonClassName}>{date}</button>\n                        </td>\n                    )\n                } else return null\n        }))\n    }\n\n    return (\n        <table className=\"calendarTable\">\n            <thead>\n                <tr>\n                    <th className=\"calendarHeadCell\">\n                        Employees\n                    </th>\n                    {renderTableHead()}\n                </tr>\n            </thead>\n            <tbody>\n                {renderTableBody()}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Calendar"]},"metadata":{},"sourceType":"module"}